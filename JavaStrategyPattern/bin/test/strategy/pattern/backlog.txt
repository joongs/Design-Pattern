//Test 주기
1. 테스트를 작성한다.
2. 실행 가능하게 만든다.(초록막대)
3. 올바르게 만든다.(중복제거)
------------------------------------
//Design Principle
1. 애플리케이션에서 달라지는 부분을 찾아내고, 
      달라지지 않는 부분으로부터 분리시킨다.
-> 달라지는 부분을 찾아서 나머지 코드에 영향을 주지 않도록 "캡슐화"합니다.

2. 구현이 아닌 인터페이스에 맞춰서 프로그래밍한다.

------------------------------------
//Backlog list

MallardDuck을 만들 수 있다.
MallardDuck은 이름을 알 수 있다.
MallardDuck은 소리를 낼 수 있다.
MallardDuck은 수영을 할 수 있다.
MallardDuck은 형태가 있다.
MallardDuck은 날 수 있다.

RedheadDuck을 만들 수 있다.
RedheadDuck은 이름을 알 수 있다.
RedheadDuck은 소리를 낼 수 있다.
RedheadDuck은 수영을 할 수 있다.
RedheadDuck은 형태가 있다.
RedheadDuck은 날 수 있다.

RubberDuck을 만들 수 있다.
RubberDuck은 이름을 알 수 있다.
RubberDuck은 소리를 낼 수 있다.
RubberDuck은 수영을 할 수 있다.
RubberDuck은 형태가 있다.
RubberDuck은 날 수 없다.

DecoyDuck을 만들 수 있다.
DecoyDuck은 이름을 알 수 있다.
DecoyDuck은 소리를 낼 수 없다.
DecoyDuck은 수영 할 수 있다.
DecoyDuck은 형태가 있다.
DecoyDuck은 날 수 없다.

QuackBehavior 인터페이스를 정의
Quack 클래스 구현
Squeak 클래스 구현
MuteQuack 클래스 구현

FlyBehavior 인터페이스 정의
FlyWithWings 클래스 구현
FlyNoWay 클래스 구현

동적으로 행동을 지정하는 방법을 추가

ModelDuck을 만들 수 있다.
ModelDuck은 이름을 알 수 있다.
ModelDuck은 소리를 낼 수 없다.
ModelDuck은 수영을 할 수 있다.
ModelDuck은 형태가 있다.
ModelDuck은 날 수 없다.

각 행동은 인터페이스로 표현하고 행동을 구현할 떄 인터페이스를 구현하도록 하자.
- Duck에서 나는 행동과 꽥꽥 소리를 내는 행동을 Duck 클래스에서 정의한 메소드를 
써서 구현하지 않고 다른 클래스에 위임한다는 것입니다.

새로운 오리들이 출현할 때마다 fly()와 quack()메소드를 살펴봐야 한다?
-> fly(), quack() 메소드를  Duck에서 빼고 인터페이스들을 만들어서 넣으면 된다.
-> 몇개의 duck 때문에 수십개의 fly(), quack()를 사용하는 duck들이 코드를 모두 고쳐야 하는 불쌍사가 발생한다.
=> 캡슐화 - 나는 행동과 꽥꽥거리는 행동을 Duck클래스로부터 분리해낸다.

Duck 클래스에 행동과 관련된 세터(setter)메소드를 포함시켜서
프로그램 실행중에도 MallardDuck의 나는 행동을 바꿀 수 있도록 하면 좋을 것입니다.
=> 구현이 아닌 인터페이스에 맞춰서 프로그래밍한다.
-> 각 행동은 인터페이스(FlyBehavior, QuackBehavior)로 표현하고 행동을
      구현할 떄 이런 인터페이스를 구현하도록 하겠습니다.




------------------------------------

MallardDuck을 만들 수 있다. - complete
이름을 알 수 있다. - getName() - complete
소리를 낼 수 있다. - quack() - complete
수영할 수 있다. - swim() - complete
형태가 있다. - display() - complete
날수 있다. - fly() - complete

RedheadDuck을 만들 수 있다. - complete
이름을 알수 있다. - getName() - complete
소리를 낼 수 있다. - quack() - complete
수영할 수 있다. - swim() - complete
형태가 있다. - display() - complete
날수 있다. - fly() - complete

Duck을 만들 수 있다. - complete
공용 이름을 알수 있다. - getName()
공용 소리를 낼 수 있다. - quack()
공용 수영할 수 있다. - swim()
공용 형태가 있다. - display() - complete
날수 있다. - fly() - complete

RubberDuck을 만들 수 있다. - complete
이름을 알수 있다. - complete
소리를 낼 수 있다. - complete
수영을 할 수 있다. - complete
형태가 있다. - complete
날수 없다. - complete