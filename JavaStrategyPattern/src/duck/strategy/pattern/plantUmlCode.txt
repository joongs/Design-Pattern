@startuml
abstract class Duck {
	#String name
	#QuackBehavior quackBehavior
	#flyBehavior flyBehavior
	+Duck()
	+String getName()
	+String swim()
	+{abstract}String display()
	+String performQuack()
	+String performFly()
}
class MallardDuck {
	+MallardDuck()
	+MallardDuck(String name)
	+String display()
}
class Duck {
}
Duck <|-- MallardDuck
class RedheadDuck {
	+RedheadDuck()
	+RedheadDuck(String name)
	+String display()
}
class Duck {
}
Duck <|-- RedheadDuck
class RubberDuck {
	+RubberDuck()
	+RubberDuck(String name)
	+String display()
}
class Duck {
}
Duck <|-- RubberDuck
class DecoyDuck {
	+DecoyDuck()
	+DecoyDuck(String name)
	+String display()
}
class Duck {
}
Duck <|-- DecoyDuck
interface flyBehavior {
	String fly()
}
class FlyNoWay {
	+String fly()
}
class flyBehavior {
}
flyBehavior <|.. FlyNoWay
class FlyWithWings {
	+String fly()
}
class flyBehavior {
}
flyBehavior <|.. FlyWithWings
interface QuackBehavior {
	String quack()
}
class Quack {
	+String quack()
}
class QuackBehavior {
}
QuackBehavior <|.. Quack
class MuteQuack {
	+String quack()
}
class QuackBehavior {
}
QuackBehavior <|.. MuteQuack
class Squeak {
	+String quack()
}
class QuackBehavior {
}
QuackBehavior <|.. Squeak
@enduml